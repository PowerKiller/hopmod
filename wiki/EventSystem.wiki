#labels manual
== Event Identifiers ==

These are predefined identifiers that you use to address an event type in a call to the event_handler function. The predefined identifiers are created on server start up and reference unique integer constants that represent indexes to elements in the event-handlers table, and are only meaningful to the internal event system implementation.

=== Server ===

|| *ID* || *Source* || *Data* ||
|| <tt>onstartup</tt> || Server process creation ||||
|| <tt>onshutdown</tt> || Server process termination ||||
|| <tt>ontimeupdate</tt> || Generated approximately every 1 minute || $minutes_remaining||
|| <tt>onendgame</tt> || Game ended. Generated after game intermission and just before the next map change. ||||
|| <tt>onmapchanged</tt> || Map changed (new game) || ||
|| <tt>onsetmap</tt> || Game ended. Generated after game intermission. ||||
|| <tt>onchmm</tt> || Mastermode change || $cn $mm_code||
|| <tt>onnewmap</tt> || Player executes /newmap in coop-edit mode. || $cn $size||

=== Player ===

|| *ID* || *Source* || *Data* ||
|| <tt>onconnect</tt> || Connected to server and sent first SV_INIT packet. || $cn||
|| <tt>ondisconnect</tt> || Disconnecting from server. || $cn||
|| <tt>onrename</tt> || Renamed. || $cn $old_name $new_name||
|| <tt>onreteam</tt> || Moved to another team. || $cn $old_team $new_team||
|| <tt>ontext</tt> || Sent message. || $cn $text||
|| <tt>onsayteam</tt> || Sent message destined for team mates.|| $cn $text||
|| <tt>onkick</tt> || Kicked from server. || $cn $master $cn||
|| <tt>onmapvote</tt> || Voted for new mode/map. || $cn $gamemode $map||
|| <tt>onspectator</tt> || Joined or left spectators. || $cn $value||
|| <tt>ondeath</tt> || Fragged or suicided. || $cn $fragger_cn||
|| <tt>onitempickup</tt> || Picked up game item. || $cn $item_type||
|| <tt>ondamage</tt> || Received damage. || $source_cn $target_cn $damage_value||
|| <tt>ontakeflag</tt> || Stolen enemy flag. || $cn||
|| <tt>ondropflag</tt> || Dropped enemy flag. || $cn||
|| <tt>onreturnflag</tt> || Returned team flag. || $cn||
|| <tt>onscoreflag</tt> || Scored for team. || $cn||
|| <tt>onsetmaster</tt> || Claimed or relinquished master. || $cn $set $password||
|| <strike><tt>onapprovemaster</tt></strike> || Approved a player for master status. || $master_cn $approver_cn||
|| <tt>onauth</tt> || Player attempted to authenticate. || $cn $success $authname ||

=== Team ===

|| *ID* || *Source* || *Data* ||

|| <tt>onresetflag</tt> || Enemy flag was reset (returned to enemy base). || $last_owner_cn ||
|| <tt>oncapturebase</tt> || Captured base. || $cn||
|| <tt>onlostbase</tt> || Lost base. || $cn||
|| <tt>onwincapture</tt> || Won capture game. || $team||

== Event Handlers ==

The event_handler function attaches event handling code to the list of event handlers for a particular event type. 

<code>event_handler $ontext [
  parameters cn text
  // put your handler code here...  
]
</code>

=== Cancelling an event handler ===

The cancel_handler function signals to the event system that the executing event handler code should be detached and not called ever again in future event dispatches.

<code>event_handler $ontext [
  parameters cn text
  // put your handler code here...
  cancel_handler
]</code>

=== Named event handlers ===

Named event handlers are useful in pluggable script modules for unloading event handlers in an easy and clean way. The current syntax for defining named event handlers and cancelling them is shown in the following code example.

<code>named_event_handler $ontext [
 parameters cn text
 // put code here...
] "myfiltermod"

named_event_handler $onsayteam [
 parameters cn text
 //put code here...
] "myfiltermod"

myfiltermod_unload = [
 cancel_named_handler $ontext "myfiltermod"
 cancel_named_handler $onsayteam "myfiltermod"
]
</code>