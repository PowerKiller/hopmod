#labels manual
== Base ==

=== Alias type ===
|| *Usage* || *Description*||
|| `alias <id> <code>` || Create or overwrite alias.||
|| `push <id> <code>` || Push new code onto alias.||
|| `pop <id>` || Pop latest code from alias.||

=== Error handling ===

|| *Usage* || *Description*||
||  `throw <error-key>` || Throw exception to the script interpreter/application for handling. The error key must begin with "runtime."||
|| `try <op> <arg> ... <catch code>` || Catch any exception thrown from inside the running operation to prevent normal exception handling and to resume script execution after try.||

=== Object management ===

|| *Usage* || *Description*||
|| `new <existing-object-id> <new-object-id>` || ||
|| `delete <id>`  || ||


== Core ==

=== Arithmetic ===


|| *Usage* || *Description*||
|| `+ <x> <y>` || Add ||
|| `- <x> <y>` || Subtract||
|| `* <x> <y>` || Multiply||
|| `div <x> <y>` || Divide||
|| `mod <x> <y>` || Modulo||
|| `min <x> <y>` || Minimum||
|| `max <x> <y>` || Maximum||
|| `fadd <x> <y>` || Floating-point add||
|| `fsub <x> <y>` || Floating-point subtract||
|| `fmul <x> <y>` || Floating-point multiply||
|| `fdiv <x> <y>` || Floating-point division||
|| `round <x>` || Round to nearest integer.||
|| `ceil <x>` || Smallest integral value not less than `<x>`||
|| `floor <x>` || Largest integral value not greater than `<x>`||
|| `abs <x>` || Absolute value||
|| `fabs <x>` || Absolute value||

=== Logic ===


|| *Usage* || *Description*||
|| `! <bool>` || Not||
|| `| | <bool> <bool>` || Or||
|| `&& <bool> <bool>` || And||


=== Comparison ===


|| *Usage* || *Description*||
|| `= <x> <y>` || Equal to||
|| `!= <x> <y>` || Not equal to||
|| `> <x> <y>` || Greater than||
|| `>= <x> <y>` || Greater than or equal to||
|| `< <x> <y>` || Less than||
|| `<= <x> <y>` || Less than or equal to||


=== Control flow ===


|| *Usage*||
|| `if <cond> <code-if-true> <code-if-false>`||
|| `loop <count-var-id> <times> <code>`||
|| `while <cond> <code>`||


=== List ===


|| *Usage* || *Description*||
|| `at <index> <list>` || Returns data of a list element.||
|| `listlen <index> <list>` || Returns list length (number of elements).||
|| `foreach <list>` || Iterate list elements.||
|| `concat <list> <list>` || Concatenate||


=== String ===


|| *Usage* || *Description*||
|| `strcmp <x> <y>` || Comparison||
|| `match <pattern> <test>` || POSIX basic regular expression ||
|| `concatword <x> <y>` || Concatenate `<x> and <y>` without inserting extra characters, like with the concat function.||
|| `format <template> <arg> ...` || The template argument takes a format specification, e.g. "%1 %2", with the %n arguments corresponding to the function's variable argument list.||
|| `split <string> <separator>` || Returns a list of string tokens.||


=== Date and Time ===


|| *Usage* || *Description*||
|| now || Returns Unix Timestamp||
|| `date <timestamp>` || Returns standard string representation of a date, the format is "YYYY-MM-DD".||
|| `time <timestamp>` || Returns standard string representation of time, the format is "HH:MM:SS[+/-]TZ"||
|| `datetime <timestamp>` || Returns standard string representation of date and time, the format is "YYYY-MM-DDTHH:hh:mm::ss[+/-]TZ".||
|| `weekday <timestamp>` || Returns non-abbreviated week day name.||
|| `month <timestamp>` || Returns non-abbreviated month name.||


=== Other ===


|| *Usage* || *Description*||
|| `symbol? <id>` || Returns 1 or 0 depending on whether the symbol is found.||
|| `dump <file>` || Writes all persist-able symbol values for the current domain to a file.||


== System ==

=== Execution ===


|| *Usage* || *Description*||
|| `exec <file>` || Execute script file.||
|| `system <command>` || Execute shell command and return the output.||


=== File ===


|| *Usage* || *Description*||
|| `path? <filename>` || Returns 1 or 0 depending on whether the path is found.||
|| `file_modified <filename` || Returns file's modification date-time as Unix timestamp.||

=== Environment Variables ===


|| *Usage*||
|| getvar `<id>`||
|| setvar `<id> <value>`||
|| unsetvar `<id>`||