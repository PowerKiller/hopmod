#labels manual,Phase-Implementation
== Functions ==

=== Logging ===
|| *Usage* || *Description* ||
|| <tt>logfile $file $func</tt> || Create and open a log file for writing. The second argument is a function name used to define your log function e.g "$funcname $text".||
|| <tt>log_status $text</tt> || Write a log message to server status output (stdout).||
|| <tt>log_error $text</tt> || Write a log message to server error output (stderr).||
|| <tt>log $text</tt> || Write a log message to the general server log file, located at "logs/server.log". If you are running the IRC bot, this is the file it reads from to broadcast game and server events.||

=== Server ===

|| *Usage* || *Description* ||
|| <tt>msg $text</tt> || Broadcast a server message.||
|| <tt>changemap $mode $map</tt> || ||
|| <tt>allowhost $hostname</tt> || Add ip to list of hosts allowed to connect to the server when the game mode is set to locked.||
|| <tt>denyhost $hostname</tt> || Remove ip from list of allowed hosts.||
|| <tt>flood_protection $type $interval</tt> || Limit the frequency players can send packets to server. Packet types supported: SV_TEXT, SV_SAYTEAM, SV_SETMASTER, SV_MAPVOTE, SV_KICK.||
|| <tt>restarter</tt> || Create a restart process so when the server process terminates it is respawned.||
|| <tt>shutdown</tt> ||||
|| <tt>event_handler $event-id $code</tt> || Run code on event.||
|| <tt>adminpass $password</tt> || Compare server password with password argument.||
|| <tt>clearconfig</tt> || Removes all server mod configurations without restarting the server process. <b>Warning: clearconfig closes all the log files and the script pipe.</b> After calling clearconfig, to restore the server mod, a server restart is required.||
|| <tt>reloadconfig</tt> || Does clearconfig (see previous function) and then loads the main/startup configuration file (conf/server.conf). This function is useful for updating the server without restarting it.||
|| <tt>ban $ip $perm</tt> || Add banned ip/network. The perm argument value is 1 or 0.||
|| <tt>removeban $ip || Remove temporary or permanent ban.||
|| <tt>clearbans</tt> || Clears all temporary bans.||

=== Game ===

|| *Usage* || *Description* ||
|| <tt>recorddemo $set $file</tt> || || 
|| <tt>stopdemo</tt> ||||
|| <tt>teamgame</tt> || Returns 1 or 0 depending on whether current game mode is team-based.||
|| <tt>itemsgame</tt> || Current game has items.||
|| <tt>capturegame</tt> || Current game is capture based.||
|| <tt>ctfgame</tt> || Current game is CTF based.||
|| <tt>capture_teamscore $team</tt> ||||
|| <tt>players</tt> || Returns a list of player client numbers.||
|| <tt>teams</tt> || Returns a list of team names.||
|| <tt>worstteam</tt> ||||
|| <tt>teamscore $teamname</tt> ||||
|| <tt>setteam $cn $newteam</tt> ||||
|| <tt>changetime $milliseconds</tt> || change game time (mins remaining). Use this function instead of setting gametime variable.||
|| <tt>secsleft</tt> || Get the number of seconds remaining of the current game.||

=== Player ===
|| *Usage* || *Notes*||
|| <tt>privmsg $cn $text</tt> || Send a private server message.||
|| <tt>player_name $cn</tt> ||||
|| <tt>player_team $cn</tt> ||||
|| <tt>player_ip $cn</tt> ||||
|| <tt>player_ping $cn</tt> || Latest ping reported by the player.||
|| <tt>player_lag $cn</tt> || Calculated from the flow of SV_POS packets.||
|| <tt>player_status $cn</tt> || String values: alive, dead, spawning, lagged, editing or spectator.||
|| <tt>player_contime $cn</tt> || Connection time in milliseconds.||
|| <tt>player_conid $cn</tt> || Unique connection id.||
|| <tt>player_priv $cn</tt> || String values: none, master or admin.||
|| <tt>player_frags $cn</tt> ||||
|| <tt>player_deaths $cn</tt> ||||
|| <tt>player_hits $cn</tt> ||||
|| <tt>player_misses $cn</tt> ||||
|| <tt>player_accuracy $cn</tt> ||||
|| <tt>player_effectiveness $cn</tt> || ||
|| <tt>player_timeplayed $cn</tt> ||||
|| <tt>player_rating cn$</tt> ||||
|| <tt>player_gun $cn</tt> || Returns a string value.||
|| <tt>player_health $cn</tt> ||||
|| <tt>player_maxhealth $cn</tt> ||||
|| <tt>player_pos_x $cn</tt> ||||
|| <tt>player_pos_y $cn</tt> ||||
|| <tt>player_pos_z $cn</tt> ||||
|| <tt>player_var $cn $id [$value]</tt> || Set or get a player variable. Player variables set using this function exist until the next game.||
|| <tt>player_pvar $cn $id [$value]</tt> || Set or get a persistent player variable. Player variables set using this function exist until the server process terminates.||
|| <tt>player_has_var $cn $id</tt> || Returns 1 or 0 depending on whether a player variable $id already exists.||
|| <tt>setpriv $cn $level</tt> || Set a player's privilege level. Level string values: none, master or admin. It's possible to give more than 1 player a raised privilege level as master or admin control is passed to a player secretly.||
|| <tt>kick $cn</tt> || Kick and ban player.||
|| <tt>spec $cn</tt> || Force a player to join spectators.||
|| <tt>unspec $cn</tt> || Force a player back into the game.||
|| <tt>setmaster $cn $set</tt> || Force a player to claim or relinquish master control. The set argument has value of 1 or 0.||
|| <strike><tt>approve $cn</tt></strike> || Approve a player who requested master.||
|| <tt>spy $cn</tt> || ||
|| <tt>dupname $cn</tt> || Returns value 1 or 0 depending on whether the player's name is a duplicate of another player's name, in the same game.||
|| <tt>disc_reason $cn || Returns a disconnect reason code, if one has been set.||
|| <tt>teamplayerrank $cn</tt> ||||

=== Miscellaneous ===

|| *Usage* || *Description*||
|| <tt>sleep $countdown $code</tt> || Schedule some code to be run in $countdown milliseconds.||
|| <tt>interval $countdown $code</tt> || Schedule some code to be run every $countdown milliseconds.||
|| <tt>script_pipe $file $args $onfinish</tt> || Create a script pipe between the server and a process, the process feeds the server with CubeScript code which it executes and returns the result of the last expression back to the process. ||
|| <tt>resolve $hostname</tt> || Resolve host name with dns query to return IP address.||
|| <tt>country $ip</tt> || Resolve IP address to country. Requires the GeoIp module to be loaded.||
|| <tt>daemon $file $args $stdout $stderr</tt> || Spawn a daemon process.||
|| <tt>kill $pid</tt> || Send SIGTERM signal to a process.||
|| <tt>server_sleep $ms</tt> || Put server process into sleep state for a number of milliseconds.||
|| <tt>shell_quote $shellcode</tt> || Escapes shell syntax characters.||

== Objects ==

=== sqlite3 ===

==== Member functions ====

|| *Usage* || *Description*||
|| <tt>open $db-filename</tt> || Open database connection.||
|| <tt>onerror $code</tt> || Execute $code when the eval function fails. Note: this function doesn't catch the exception thrown in eval.||
|| <tt>eval $sql [$row-result-code]</tt> || Evaluate SQL statement. ||
|| <tt>last_rowid $db-file</tt> || Return the row id of the last inserted row.||
|| <tt>close</tt> || Close database connection. ||
|| <tt>busy_timeout $milliseconds</tt> || Set busy timeout for eval calls.||
|| <tt>onbusy $code</tt> || Execute $code when an eval call has failed to execute because the database is locked.||

=== load ===

== Variables ==

|| *Name* || *Permissions* || *Description*||
|| <tt>servername</tt> || read write || Name of the server (seen in the description column on the server browser list)||
|| <tt>maxclients</tt> || read write || Player capacity.||
|| <tt>playercount</tt> || read || Number of players currently on the server.||
|| <tt>gamecount</tt> || read || Number of map changes.||
|| <tt>mastermode</tt> || read write ||||
|| <tt>gamemode</tt> || read, writable in onsetmap handlers ||||
|| <tt>mapname</tt> || read, writable in onsetmap handlers ||||
|| <tt>uptime</tt> || read || The server's uptime in milliseconds.||
|| <tt>gametime</tt> || read write|| The game time that was set at beginning of the current game.||
|| <tt>timeleft</tt> || read || Minutes remaining of the current game.||
|| <tt>allow_mm_veto</tt> || read write || Permit masters to change mastermode to veto.||
|| <tt>allow_mm_locked</tt> || read write || Permit locked mastermode.||
|| <tt>allow_mm_private</tt> || read write || Permit private mastermode.||
|| <tt>autoapprove</tt> || read write || The server auto-approves master requests.||
|| <tt>tx_bytes</tt> || read || Number of transmitted bytes from game packets.||
|| <tt>tx_packets</tt> || read || Number of transmitted game packets.||
|| <tt>rx_bytes</tt> || read || Number of received bytes from game packets.||
|| <tt>rx_packets</tt> || read || Number of received game packets.||
|| <tt>reassignteams</tt> || read write || Reassign teams on map change.||

== Constants ==

|| *Name* || *Description/Notes*||
|| <tt>SERVER_FILENAME</tt> || Program name, read from argv[0] in main().||
|| <tt>MASTERSERVER</tt> || The host name of the master server (used for server registration and master authentication). By default configuration, the value is "sauerbraten.org".||

=== Mastermodes ===

** <tt>MM_OPEN</tt><br>
** <tt>MM_VETO</tt><br>
** <tt>MM_LOCKED</tt><br>
** <tt>MM_PRIVATE</tt><br>

=== Disconnect Reasons ===

** <tt>DISC_NONE</tt><br>
** <tt>DISC_EOP</tt><br>
** <tt>DISC_CN</tt><br>
** <tt>DISC_KICK</tt><br>
** <tt>DISC_TAGT</tt><br>
** <tt>DISC_IPBAN</tt><br>
** <tt>DISC_PRIVATE</tt><br>
** <tt>DISC_MAXCLIENTS</tt><br>
** <tt>DISC_NUM</tt><br>

== See Also ==

** [[CubeScript Runtime Library Reference]]