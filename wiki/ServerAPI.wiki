#labels manual,Phase-Implementation
== Player Functions ==

|| *Name and Parameters* || *Description* ||
|| `player_id(cn)` || Get name+ip id ||
|| `player_sessionid(cn)` || Get connection id ||
|| `player_name(cn)` || Get name ||
|| `player_team(cn)` || Get team ||
|| `player_ip(cn)` || Get IP address ||
|| `player_iplong(cn)` || Get ip address in long form ||
|| `player_connection_time(cn)` || Get connection time (seconds) ||
|| `player_ping(cn)` || Get last ping value reported ||
|| `player_status(cn)` || Get playing status ||
|| `player_status_code(cn)` || Get playing status as number code ||
|| `player_priv(cn)` || Get privilege ||
|| `player_priv_code(cn)` || Get privilege as number code ||
|| `player_frags(cn)` || Get frags count ||
|| `player_teamkills(cn)` || Get teamkills ||
|| `player_deaths(cn)` || Get deaths ||
|| `player_suicides(cn)` || Get suicides ||
|| `player_damage(cn)` || Get damage ||
|| `player_health(cn)` || Get health ||
|| `player_maxhealth(cn)` || Get starting health ||
|| `player_gun(cn)` || Get weapon held ||
|| `player_hits(cn)` || Get hits ||
|| `player_shots(cn)` || Get shots ||
|| `player_accuracy(cn)` || Get accuracy percentage ||
|| `player_timeplayed(cn)` || Get time played in current game (seconds) ||
|| `player_win(cn)` || Get win value (1 or 0) -- 1 if player has the most frags. ||
|| `player_bots(cn)` || Get bot count ||
|| `player_msg(cn,text)` || Send a private message ||
|| `player_slay(cn)` || Force death ||
|| `changeteam(cn,team)` || Force team switch ||
|| `kick(cn,[bantime],[admin],[reason])` || Kick and ban. The ban time is 4 hours by default. ||
|| `spec(cn)` || Leave game and join spectators. ||
|| `unspec(cn)` || Leave spectators and join game. ||
|| `mute(cn)` || Block chat messages ||
|| `unmute(cn)` ||  Unblock chat messages ||
|| `setmaster(cn)` || Give master status (note: only 1 master or admin supported)||
|| `setadmin(cn)` ||  Give admin status (note: only 1 master or admin supported) ||
|| `unsetmaster()` || Revoke master status for the currently assigned master ||
|| `players()` || Return a list of client numbers for the players in game ||
|| `spectators()` || Return a list of client numbers for the players spectating ||

== Team Functions ==

|| *Name and Parameters* || *Description* ||
|| `team_score(team)` || Get score ||
|| `team_score(team)` || Get score ||
|| `team_win(team)` || Get win value (1 or 0) ||
|| `team_draw(team)` || Get draw value (1 or 0) ||
|| `team_players(team)` || Get a list of client numbers for the players in the team ||
|| `teams()` || Get a list of team names ||

== Game Control Functions ==

|| *Name and Parameters* || *Description* ||
|| `pausegame(pause)` || Pause or resume game. Argument value must be 1 or 0 ||
|| `changetime(milliseconds)` || Change time remaining ||
|| `changemap(map,[mode],[time])` || Change map ||
|| `delbot(cn)` || Remove a bot from the game belonging to a player ||

== Game Control Variables ==

|| *Name and Values* || *Description* ||
|| `allow_quad = 0 or 1` || Disable quad item for games modes that support quad ||
|| `allow_healthboost = 0 or 1` || Disable healthboost item for games modes that support quad ||
|| `botlimit = between 0 and 32` || Set the maximum number of bots ||
|| `botbalance = 0 or 1` || (what does this do?) ||

== Game State Variables ==

|| *Name and Values* || *Description* ||
|| `map` || ||
|| `gamemode` ||  ||
|| `timeleft` || Value in minutes. ||
|| `playercount` ||  ||
|| `speccount` || ||
|| `botcount` || ||
|| `next_mode` || Set next game mode (usually set from "setnextgame" event handler) ||
|| `next_map` || Set next map name (usually set from "setnextgame" event handler) ||
|| `reassignteams = 0 or 1` || Reshuffle teams at the beginning of each game||

== Server Functions ==

|| *Name and Parameters* || *Description* ||
|| `restart()` || Restart server process at end of the game or immediately if the server is empty. ||
|| `restart_now()` || Restart server now ||
|| `shutdown()` || Shut down server process (which will also terminate the irc bot process) ||
|| `reloadscripts()` || Reload all the scripts without restarting the server ||
|| `msg(text)` || Broadcast message on server ||
|| `clearbans()` || Clear all temporary bans ||
|| `loadbanlist(filename)` || ||
|| `writebanlist(filename)` || ||
|| `permban(ip)` || ||
|| `unsetban(ip)` || ||
|| `recorddemo(filename)` || Immediately start recording the game (no server message is broadcast) ||
|| `stopdemo()` || Stop recording game ||

== Server State Variables ==

|| *Name and Values* || *Description* ||
|| `servername` || Name as seen in the description column in the client's server browser.||
|| `serverip` || Writable at initialization, read only when and after "started" event is dispatched. ||
|| `serverport` || Writable at initialization, read only when and after "started" event is dispatched. ||
|| `uptime` || Value in milliseconds ||
|| `masterserver` || Hostname of the master server ||
|| `updatemaster = 0 or 1` || Useful for preventing server from being registered and appearing on the public server list||
|| `maxplayers` || ||
|| `admin_password` || Password required for player to gain admin status ||
|| `server_password` || Password required for player to gain entry to server ||
|| `allow_mm_veto = 0 or 1` || Permit master players to switch to veto mode ||
|| `allow_mm_locked = 0 or 1` || Permit master players to switch to locked mode ||
|| `allow_mm_private = 0 or 1` || Permit master players to switch to private mode ||
|| `mastermode` || ||

== General Utility Functions ==

|| *Name and Parameters* || *Description* ||
|| `ip_to_country(ip)` || Resolve IP address to country ||
|| `ip_to_country_code(ip` || Resolve IP address to a two letter country code ||
|| `load_geoip_database(filename)` || Resolve ip address to a two letter country code ||
|| `gethostbyname(name)` || Resolve FQDN to IP address. ||